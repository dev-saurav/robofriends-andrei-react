{"version":3,"sources":["Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll.js","components/ErrorBoundry/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","cardList","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChangeHandler","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","toLowerCase","includes","length","CardList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qNAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,6BACI,4BAAKJ,GACL,2BAAIC,MCWLI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KACH,SAAAC,GAAK,OAAI,kBAAC,EAAD,CACLC,IAAKD,EAAMT,GACXA,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,aCGtBS,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKT,UAAU,OACX,2BACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCQXI,EAfA,SAACC,GAQZ,OACI,yBAAKC,MAPK,CACVC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAKHJ,EAAMK,WCaJC,E,4MAtBXC,MAAQ,CACJC,UAAU,G,gEAEIC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAU,M,+BAId,OAAIG,KAAKJ,MAAMC,SAEP,wDAIAG,KAAKX,MAAMK,a,GAhBAQ,aCgDZC,E,kDA3CX,aAAe,IAAD,8BACV,gBAeJC,sBAAwB,SAACC,GACrB,EAAKJ,SAAS,CACVK,YAAaD,EAAME,OAAOC,SAhB9B,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BAU1B,IAAD,OACCC,EAAiBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAAlC,GAAK,OAAIA,EAAMR,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAClH,OAAKhB,KAAKJ,MAAMjB,OAAOuC,OAIf,yBAAK3C,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWS,aAAcgB,KAAKI,wBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACe,EAAD,CAAUxC,OAAQmC,OAR3B,+C,GA1BDZ,aCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.e1521ab1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200*200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../../Card';\r\nconst cardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(\r\n                    robot => <Card\r\n                        key={robot.id}\r\n                        id={robot.id}\r\n                        name={robot.name}\r\n                        email={robot.email}\r\n                    />)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    const style = {\r\n        overflowY: 'scroll',\r\n        border: '1px soild black',\r\n        height: '500px'\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    state = {\r\n        hasError: false\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1>ooops. That is not good!</h1>\r\n            )\r\n        } else {\r\n            return (\r\n                this.props.children\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList/CardList'\r\nimport SearchBox from '../components/SearchBox/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json())\r\n            .then(users => {\r\n                this.setState({ robots: users })\r\n            })\r\n    }\r\n\r\n    onSearchChangeHandler = (event) => {\r\n        this.setState({\r\n            searchField: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()));\r\n        if (!this.state.robots.length) {\r\n            return <h1>Loading....</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChangeHandler} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}